1.字符串操作
	a.字符串的应用场景
	b.字符串的索引
	c.字符串的切片
	d.其他操作
	e.引号

a.字符串应用场景
	a1.用户名、密码、邮箱
	a2.电话号码升级
		0452-8869504
		0452-68869504
	a3.爬虫网站域名
		www.baidu.com--->baidu
		www.bilibi.com--->bilibili
	a4.分词
		hello i am your baba！
		你知不知道我知道你不知道我知道
	a5.密码破解
	a6.报告
b.字符串的索引
	索引:下标，从0开始，可以从左到右，也可以从右到左
	字符串可以通过string[x],x作为索引进行字符串截取
	b   a   i   d   u
	0   1   2   3   4
	-5 -4  -3  -2  -1

c.字符串的切片
	切片：通过索引截取所需要的信息，string[x,y]截取的信息是x,y-1

d.其他操作
	a.拼接
	b.遍历
	c.去空格
	str.strip()   去掉两边空格
	str.lstrip()  去掉左边空格
	str.rstrip()  去掉右边空格
	d.计算长度
	len()         计算元素个数
e.引号
	a.单引号
	b.双引号
	c.三引号
	注意:三引号主要用于注释，也可以用于多行打印
2.列表
	a.序列
	b.列表
	c.列表的应用场景
	d.列表的访问
	e.列表的索引和切片
	f.列表的拼接
	g.列表的更新
	h.列表的删除
a.序列
	序列是python中最基本的数据结构
	序列中每个元素分配一个数字标识他们的位置，也就是索引
	python中有6种序列类型，列表和元组使用最多
	序列可以进行索引、切片、拼接

b.列表
	列表是python中常见的数据类型，中括号中逗号分开元素，元素是可以不同类型的
	l=[1,2,3]
	l=['heygor',18,'o8ma',50]
	l=[1,2,[3,4],5]

c.列表的应用场景
	1.商品加入购物车
	2.自动化投简历屏蔽某些公司
	3.爬虫页面屏蔽某些信息

d.列表的访问
	1.直接访问
	2.遍历访问
	3.成员运算访问

e.索引和切片
	索引可以理解为下标，左侧从0开始，右侧从-1开始
	IndexError: list index out of range
	索引超出范围

f.列表的拼接
g.列表的更新
	通过索引找到对应元素进行赋值
h.列表的删除
	del 删除元素

------------------------------------------------------
列表补充
a.栈的方式访问列表
b.获取列表的索引
c.列表的排序
d.列表推导式

a.栈的方式访问列表
先进去的数据后出来
后进去的数据现出来
列表.append()     追加内容
列表.pop()        弹出内容


b.获取列表中的索引
注意:只能是同种类型数据进行操作，数字和数字，字符串和字符串
列表.index()

c.列表的排序
列表.reverse()    反向打印
列表.sort()

d.列表推导式
	1.列表推导式是什么
	2.优势
	3.列表推导式的使用

1.列表推导式是什么
	又叫列表解析式，提供一种简单方法创建列表
	结构中括号包含一个表达式，，可以有一个或者多个if语句，返回结构是一个新的列表

2.优势
	1.代码短，可读性好
	2.速度快

3.列表推导式的使用
	标准格式
	[表达式 for 变量 in 列表]
	[表达式 for 变量 in 列表 if 条件]
--------------------------------------------------
元组
a.元组的定义
b.元组和列表的区别
c.创建元组
d.访问元组
e.元组的索引和切片
f.删除元组
g.补充

a.元组的定义
元组和列表类似，小括号中包含元素,元素之间通过逗号分隔
(1,2,3)
('o8ma','ladeng','telangpu')

b.元组和列表的区别
1.敏感信息传递给不了解的函数，希望数据不被修改，使用元组
2.处理动态数据时候，经常更新数据，使用列表
3.元组不可变，列表可变
4.元组的速度快

c.创建元组
如果元组中只有一个元素，需要在后面添加一个逗号

d.访问元组
直接访问
遍历访问
成员访问

e.元组的索引和切片
索引可以理解为下标，左侧从0开始，右侧从-1开始

f.删除元组
del删除元组

g.补充内容
len()    元素个数
max()    元素中最大值
min()    元素中最小值
tuple.index() 元组中某个元素第一次匹配的索引
tuple.count() 元祖中某个元素出现的次数

