3.运算符和表达式
a.表达式
b.操作数
c.运算符
c1.算数运算符
c2.关系运算符
比较两个操作数大于小于等于运算符，返回的值是布尔值
	1>相等运算符==，判断两个操作数是否相等
		如果相等，返回真，如果不相等返回假
	2>等同运算符
		==并非严格意义上相等性判断，通过数据类型转换hours也能返回true
		===严格意义上的相等，他们的值和他们的数据类型完全一致时候才返回true
	3>不等运算符
		使用！=返回一个布尔值表示两个操作数是否不相等，如果不相等返回True
	4>不等同运算符
		!==效果正好和等同运算符相反，如果两个操作数严格不相等返回true
	5>比较运算符
		两个操作数的比较，返回的值只能是真或者假
		>
		<
		==
		>=
		<=
	6>in运算符
		in运算符检查对象中是否有指定属性，通常数组对象中存在元素索引属性集合，集合中每个元素都是非负整数
	7.instanceof运算符
		返回的值是一个布尔值，表明对象是否是某个类的实例 
--------------------------------------------------------------------
1.逻辑运算符
	1>逻辑与
	逻辑与操作符&&，属于双目运算符，操作数被当成布尔类型，可以使变量也可以是常量
	&&用法：
	操作数1&&操作数2
	2>逻辑或运算符
	逻辑或运算符||,属于双目运算符，对两个操作数进行运算返回一个布尔值，返回的值表明两个操作数中是否至少一个的值为true，操作数可以是常量或者变量
	3>逻辑非
	逻辑非运算符！属于单目运算符，对操作数的逻辑值取反，操作数可以是变量或者常量
2.其他运算符
	1>类型检测运算符
	js中每个数据都有数据类型，通过typeof可以获取到数据类型名
	typeof返回值有6种可能
		Number
		String
		Boolean
		Object
		Function
	2>条件运算符
	可以根据条件在两个语句中选择一个来执行，三目运算符
	条件表达式？语句1:语句2
	满足条件执行语句1，不满足条件执行语句2
	3>void运算符
	有些地方不需要返回值，比如js代码写入浏览器中并且执行
	4>数组存取运算符
	5>delete运算符
	delete运算符可以是删除对象的一个属性或者数组的一个元素，js对象属性可以动态添加，也可以通过delete删除
	6>this运算符
	准确说是一个关键字，可以理解为运算符，面向对象编程中可以返回当前对象引用
3.控制语句
也叫程序流程控制，分为判断和循环
建议:流程图制作
	1>选择语句(条件判断)
	根据条件来选择一个任务分支语句的统称，js提供if判断语句和switch判断语句
		a.if语句
		if语句测试的是一个布尔类型表达式，如果结果为真则执行某段程序
		if ( 表达式 )       //条件判断语句
		{
			语句组;         //满足条件时候所执行的程序代码
		}
		注意:表达式一定要有，语句组可选，可以通过一条或者多条语句组成
		注意：if语句的花括号一定是成对出现，不能交叉嵌套
		b.if-else语句
		if语句根据表达式的值，决定是执行某个人物，没有其他选择(只有2种选择)
		if ( 表达式 )
		{
			语句组;
		}
		else
		{
			语句组;
		}
		c.if-else-if语句
		当有多个可供判断的条件时候，单个if-else表达不完全，使用if-else-if语句，不是单据的语句，而是多个if-else实线多路判断
		if ( 表达式 )
		{
			语句组;
		}
		else if ( 表达式 )
		{
			语句组;
		}
		...
		else
		{
			语句组;
		}
		注意:表达式必须要有，语句组可以一条或者多条语句组成
		d.switch语句
		使用if-else实线多路选择不易于维护，可以使用switch语句代替，给定多个选择中一个符合条件分支来执行
		switch （ 表达式  ）
		{
			case 标识1:
				语句组;
			case 标识2:
				语句组;
		}
	2>循环语句
	编程中有些制定需要执行多次，需要写入大量代码，计算机快速解决重复和繁琐的，将重复执行语句放在循环中根据条件进行执行，js循环包块for，while，do..while,for in....
		a.for语句
		重复执行的代码使用for比较合适
		for ( 表达式1;表达式2;表达式3 )
		{
			语句组;
		}
		b.for in 语句
		for ( 变量 in 集合 )
		{
			语句组;
		}
		注意：变量作为集合中一个元素，当即和元素个数为0时候不执行循环体
	3>while语句
	当重复执行动作比较简单时候可以使用while代替for循环，while循环在执行循环体之前会测试一个条件，如果条件成立，进入到循环体，否则跳到循环体后第一条语句
	while ( 条件表达式 )
	{
		语句组；
	}
	注意：条件表达式必选，无论返回什么类型的值都是作为布尔类型处理

	4>do-while语句
	while循环进入循环前测试条件表达式是否成立，而do..while循环限制性一遍循环体，循环体语句执行后再测试表达式，如果成立，进行下一轮测试
	do ｛
		语句组;
		｝
		while(条件表达式);
	5>跳出循环
	再循环体中直接控制循环或者进行下一轮循环
	break       无条件跳出并且结束当前的循环结构
	continue    忽略后面的语句并且结束本轮循环和开始下一轮循环
